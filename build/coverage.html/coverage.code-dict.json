{"/home/travis/build/npmtest/node-npmtest-resourcejs/test.js":"/* istanbul instrument in package npmtest_resourcejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-resourcejs/lib.npmtest_resourcejs.js":"/* istanbul instrument in package npmtest_resourcejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_resourcejs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_resourcejs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-resourcejs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-resourcejs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_resourcejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_resourcejs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_resourcejs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_resourcejs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_resourcejs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_resourcejs.__dirname + '/lib.npmtest_resourcejs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-resourcejs/node_modules/resourcejs/Resource.js":"var _ = require('lodash');\nvar paginate = require('node-paginate-anything');\nvar jsonpatch = require('fast-json-patch');\nvar middleware = require( 'composable-middleware');\nvar debug = {\n  query: require('debug')('resourcejs:query'),\n  index: require('debug')('resourcejs:index'),\n  put: require('debug')('resourcejs:put'),\n  post: require('debug')('resourcejs:post'),\n  delete: require('debug')('resourcejs:delete'),\n  respond: require('debug')('resourcejs:respond')\n};\n\nmodule.exports = function(app, route, modelName, model) {\n  // Create the name of the resource.\n  var name = modelName.toLowerCase();\n\n  // Return the object that defines this resource.\n  return {\n    /**\n     * The model for this resource.\n     */\n    model: model,\n\n    /**\n     * The name of the model.\n     */\n    modelName: modelName,\n\n    /**\n     * The name of this resource.\n     */\n    name: name,\n\n    /**\n     * The route for this model.\n     */\n    route: route + '/' + name,\n\n    /**\n     * The methods that are exposed to this resource.\n     */\n    methods: [],\n\n    /**\n     * The swagger cache.\n     */\n    __swagger: null,\n\n    /**\n     * Register a new callback but add before and after options to the middleware.\n     *\n     * @param app\n     * @param method\n     * @param path\n     * @param callback\n     * @param last\n     * @param options\n     */\n    register: function(app, method, path, callback, last, options) {\n      var mw = middleware();\n      var len, i;\n\n      // The before middleware.\n      if (options && options.before) {\n        var before = [].concat(options.before);\n        for (len = before.length, i=0; i<len; ++i) {\n          mw.use(before[i].bind(this));\n        }\n      }\n      mw.use(callback.bind(this));\n\n      // The after middleware.\n      if (options && options.after) {\n        var after = [].concat(options.after);\n        for (len = after.length, i=0; i<len; ++i) {\n          mw.use(after[i].bind(this));\n        }\n      }\n      mw.use(last.bind(this));\n\n      // Declare the resourcejs object on the app.\n      if (!app.resourcejs) {\n        app.resourcejs = {};\n      }\n\n      if (!app.resourcejs[path]) {\n        app.resourcejs[path] = {};\n      }\n\n      // Add these methods to resourcejs object in the app.\n      app.resourcejs[path][method] = mw;\n\n      // Apply these callbacks to the application.\n      app[method](path, mw);\n    },\n\n    /**\n     * Sets the different responses and calls the next middleware for\n     * execution.\n     *\n     * @param res\n     *   The response to send to the client.\n     * @param next\n     *   The next middleware\n     */\n    respond: function(req, res, next) {\n      if (req.noResponse || res.headerSent || res.headersSent) {\n        debug.respond('Skipping');\n        return next();\n      }\n\n      if (res.resource) {\n        switch (res.resource.status) {\n          case 400:\n            res.status(400).json({\n              status: 400,\n              message: res.resource.error.message,\n              errors: _.mapValues(res.resource.error.errors, function(error) {\n                return _.pick(error, 'path', 'name', 'message');\n              })\n            });\n            break;\n          case 404:\n            res.status(404).json({\n              status: 404,\n              errors: ['Resource not found']\n            });\n            break;\n          case 500:\n            res.status(500).json({\n              status: 500,\n              message: res.resource.error.message,\n              errors: _.mapValues(res.resource.error.errors, function(error) {\n                return _.pick(error, 'path', 'name', 'message');\n              })\n            });\n            break;\n          case 204:\n            // Convert 204 into 200, to preserve the empty result set.\n            // Update the empty response body based on request method type.\n            debug.respond('204 -> ' + req.__rMethod);\n            switch (req.__rMethod) {\n              case 'index':\n                res.status(200).json([]);\n                break;\n              default:\n                res.status(200).json({});\n                break;\n            }\n            break;\n          default:\n            res.status(res.resource.status).json(res.resource.item);\n            break;\n        }\n      }\n\n      next();\n    },\n\n    /**\n     * Sets the response that needs to be made and calls the next middleware for\n     * execution.\n     *\n     * @param res\n     * @param resource\n     * @param next\n     */\n    setResponse: function(res, resource, next) {\n      res.resource = resource;\n      next();\n    },\n\n    /**\n     * Returns the method options for a specific method to be executed.\n     * @param method\n     * @param options\n     * @returns {{}}\n     */\n    getMethodOptions: function(method, options) {\n      if (!options) {\n        options = {};\n      }\n\n      // If this is already converted to method options then return.\n      if (options.methodOptions) {\n        return options;\n      }\n\n      // Uppercase the method.\n      method = method.charAt(0).toUpperCase() + method.slice(1).toLowerCase();\n      var methodOptions = {methodOptions: true};\n\n      // Find all of the options that may have been passed to the rest method.\n      if (options.before) {\n        methodOptions.before = options.before;\n      }\n      else if (options.hasOwnProperty('before' + method)) {\n        methodOptions.before = options['before' + method];\n      }\n\n      if (options.after) {\n        methodOptions.after = options.after;\n      }\n      else if (options.hasOwnProperty('after' + method)) {\n        methodOptions.after = options['after' + method];\n      }\n\n      // Expose mongoose hooks for each method.\n      _.each(['before', 'after'], function(type) {\n        var path = 'hooks.' + method.toString().toLowerCase() + '.' + type;\n\n        _.set(\n          methodOptions,\n          path,\n          _.get(options, path, function(req, res, item, next) { return next(); })\n        );\n      });\n\n      // Return the options for this method.\n      return methodOptions;\n    },\n\n    /**\n     * Register the whole REST api for this resource.\n     *\n     * @param options\n     * @returns {*|null|HttpPromise}\n     */\n    rest: function(options) {\n      return this\n        .index(options)\n        .get(options)\n        .virtual(options)\n        .put(options)\n        .patch(options)\n        .post(options)\n        .delete(options);\n    },\n\n    /**\n     * Returns a query parameters fields.\n     *\n     * @param req\n     * @param name\n     * @returns {*}\n     */\n    getParamQuery: function(req, name) {\n      if (!req.query.hasOwnProperty(name)) {\n        switch (name) {\n          case 'populate':\n            return '';\n          default:\n            return null;\n        }\n      }\n      return _.words(req.query[name], /[^, ]+/g).join(' ');\n    },\n\n    /**\n     * Get the find query for the index.\n     *\n     * @param req\n     * @returns {Object}\n     */\n    getFindQuery: function(req) {\n      var findQuery = {};\n\n      // Get the filters and omit the limit, skip, select, and sort.\n      var filters = _.omit(req.query, 'limit', 'skip', 'select', 'sort', 'populate');\n\n      // Iterate through each filter.\n      _.each(filters, function(value, name) {\n\n        // Get the filter object.\n        var filter = _.zipObject(['name', 'selector'], name.split('__'));\n\n        // See if this parameter is defined in our model.\n        var param = this.model.schema.paths[filter.name.split('.')[0]];\n        if (param) {\n\n          // See if there is a selector.\n          if (filter.selector) {\n\n            // See if this selector is a regular expression.\n            if (filter.selector === 'regex') {\n\n              // Set the regular expression for the filter.\n              var parts = value.match(/\\/?([^/]+)\\/?([^/]+)?/);\n              var regex = null;\n              try {\n                regex = new RegExp(parts[1], (parts[2] || 'i'));\n              }\n              catch (err) {\n                debug.query(err);\n                regex = null;\n              }\n              if (regex) {\n                findQuery[filter.name] = regex;\n              }\n              return;\n            }\n            else {\n              // Init the filter.\n              if (!findQuery.hasOwnProperty(filter.name)) {\n                findQuery[filter.name] = {};\n              }\n\n              if (filter.selector === 'exists') {\n                value = ((value === 'true') || (value === '1')) ? true : value;\n                value = ((value === 'false') || (value === '0')) ? false : value;\n                value = !!value;\n              }\n              // Special case for in filter with multiple values.\n              else if ((_.indexOf(['in', 'nin'], filter.selector) !== -1)) {\n                value = value.split(',');\n                _.map(value, function(item) {\n                  return (param.instance === 'Number')\n                    ? parseInt(item, 10)\n                    : item;\n                });\n              }\n              else {\n                // Set the selector for this filter name.\n                value = (param.instance === 'Number')\n                  ? parseInt(value, 10)\n                  : value;\n              }\n\n              findQuery[filter.name]['$' + filter.selector] = value;\n              return;\n            }\n          }\n          else {\n            // Set the find query to this value.\n            value = (param.instance === 'Number')\n              ? parseInt(value, 10)\n              : value;\n            findQuery[filter.name] = value;\n            return;\n          }\n        }\n\n        // Set the find query to this value.\n        findQuery[filter.name] = value;\n      }.bind(this));\n\n      // Return the findQuery.\n      return findQuery;\n    },\n\n    /**\n     * The index for a resource.\n     *\n     * @param options\n     */\n    index: function(options) {\n      options = this.getMethodOptions('index', options);\n      this.methods.push('index');\n      this.register(app, 'get', this.route, function(req, res, next) {\n        // Store the internal method for response manipulation.\n        req.__rMethod = 'index';\n\n        // Allow before handlers the ability to disable resource CRUD.\n        if (req.skipResource) { return next(); }\n\n        // Get the find query.\n        var findQuery = this.getFindQuery(req);\n\n        // Get the query object.\n        var countQuery = req.countQuery || req.modelQuery || this.model;\n        var query = req.modelQuery || this.model;\n\n        // First get the total count.\n        countQuery.find(findQuery).count(function(err, count) {\n          if (err) {\n            debug.index(err);\n            return this.setResponse.call(this, res, {status: 500, error: err}, next);\n          }\n\n          // Get the default limit.\n          var defaults = {limit: 10, skip: 0};\n          var reqQuery = _.mapValues(_.defaults(_.pick(req.query, 'limit', 'skip'), defaults), function(value, key) {\n            value = parseInt(value, 10);\n            return (isNaN(value) || (value < 0)) ? defaults[key] : value;\n          });\n\n          // If a skip is provided, then set the range headers.\n          if (reqQuery.skip && !req.headers.range) {\n            req.headers['range-unit'] = 'items';\n            req.headers.range = reqQuery.skip + '-' + (reqQuery.skip + (reqQuery.limit - 1));\n          }\n\n          // Get the page range.\n          var pageRange = paginate(req, res, count, reqQuery.limit) || {\n            limit: reqQuery.limit,\n            skip: reqQuery.skip\n          };\n\n          // Make sure that if there is a range provided in the headers, it takes precedence.\n          if (req.headers.range) {\n            reqQuery.limit = pageRange.limit;\n            reqQuery.skip = pageRange.skip;\n          }\n\n          // Next get the items within the index.\n          var queryExec = query\n            .find(findQuery)\n            .limit(reqQuery.limit)\n            .skip(reqQuery.skip)\n            .select(this.getParamQuery(req, 'select'))\n            .sort(this.getParamQuery(req, 'sort'));\n\n          // Only call populate if they provide a populate query.\n          var populate = this.getParamQuery(req, 'populate');\n          if (populate) {\n            debug.index('Populate: ' + populate);\n            queryExec = queryExec.populate(populate);\n          }\n\n          options.hooks.index.before.call(\n            this,\n            req,\n            res,\n            findQuery,\n            queryExec.exec.bind(queryExec, function(err, items) {\n              if (err) {\n                debug.index(err);\n                debug.index(err.name);\n\n                if (err.name == 'CastError' && populate) {\n                  err.message = 'Cannot populate \"' + populate + '\" as it is not a reference in this resource'\n                  debug.index(err.message);\n                }\n\n                return this.setResponse.call(this, res, {status: 500, error: err}, next);\n              }\n\n              debug.index(items);\n              options.hooks.index.after.call(\n                this,\n                req,\n                res,\n                items,\n                this.setResponse.bind(this, res, {status: res.statusCode, item: items}, next)\n              );\n            }.bind(this))\n          )\n        }.bind(this));\n      }, this.respond.bind(this), options);\n      return this;\n    },\n\n    /**\n     * Register the GET method for this resource.\n     */\n    get: function(options) {\n      options = this.getMethodOptions('get', options);\n      this.methods.push('get');\n      this.register(app, 'get', this.route + '/:' + this.name + 'Id', function(req, res, next) {\n        // Store the internal method for response manipulation.\n        req.__rMethod = 'get';\n\n        if (req.skipResource) {\n          return next();\n        }\n\n        var query = req.modelQuery || this.model;\n        var search = {'_id': req.params[this.name + 'Id']};\n\n        options.hooks.get.before.call(\n          this,\n          req,\n          res,\n          search,\n          query.findOne.bind(query, search, function(err, item) {\n            if (err) return this.setResponse.call(this, res, {status: 500, error: err}, next);\n            if (!item) return this.setResponse.call(this, res, {status: 404}, next);\n\n            return options.hooks.get.after.call(\n              this,\n              req,\n              res,\n              item,\n              this.setResponse.bind(this, res, {status: 200, item: item}, next)\n            );\n          }.bind(this))\n        );\n      }, this.respond.bind(this), options);\n      return this;\n    },\n\n    /**\n     * Virtual (GET) method. Returns a user-defined projection (typically an aggregate result)\n     * derived from this resource\n     */\n    virtual: function(options) {\n      options = this.getMethodOptions('virtual', options);\n      this.methods.push('virtual');\n      var path = (options.path === undefined) ? this.path : options.path;\n      this.register(app, 'get', this.route + '/virtual/' + path, function(req, res, next) {\n        // Store the internal method for response manipulation.\n        req.__rMethod = 'virtual';\n\n        if (req.skipResource) { return next(); }\n        var query = req.modelQuery;\n        query.exec(function(err, item) {\n          if (err) return this.setResponse(res, {status: 500, error: err}, next);\n          if (!item) return this.setResponse(res, {status: 404}, next);\n          return this.setResponse(res, {status: 200, item: item}, next);\n        }.bind(this));\n      }, this.respond.bind(this), options);\n      return this;\n    },\n\n    /**\n     * Post (Create) a new item\n     */\n    post: function(options) {\n      options = this.getMethodOptions('post', options);\n      this.methods.push('post');\n      this.register(app, 'post', this.route, function(req, res, next) {\n        // Store the internal method for response manipulation.\n        req.__rMethod = 'post';\n\n        if (req.skipResource) {\n          debug.post('Skipping Resource');\n          return next();\n        }\n\n        options.hooks.post.before.call(\n          this,\n          req,\n          res,\n          req.body,\n          this.model.create.bind(this.model, req.body, function(err, item) {\n            if (err) {\n              debug.post(err);\n              return this.setResponse.call(this, res, {status: 400, error: err}, next);\n            }\n\n            debug.post(item);\n            // Trigger any after hooks before responding.\n            return options.hooks.post.after.call(\n              this,\n              req,\n              res,\n              item,\n              this.setResponse.bind(this, res, {status: 201, item: item}, next)\n            );\n          }.bind(this))\n        );\n      }.bind(this), this.respond.bind(this), options);\n      return this;\n    },\n\n    /**\n     * Put (Update) a resource.\n     */\n    put: function(options) {\n      options = this.getMethodOptions('put', options);\n      this.methods.push('put');\n      this.register(app, 'put', this.route + '/:' + this.name + 'Id', function(req, res, next) {\n        // Store the internal method for response manipulation.\n        req.__rMethod = 'put';\n\n        if (req.skipResource) {\n          debug.put('Skipping Resource');\n          return next();\n        }\n\n        // Remove __v field\n        var update = _.omit(req.body, '__v');\n        var query = req.modelQuery || this.model;\n\n        query.findOne({_id: req.params[this.name + 'Id']}, function(err, item) {\n          if (err) {\n            debug.put(err);\n            return this.setResponse.call(this, res, {status: 500, error: err}, next);\n          }\n          if (!item) {\n            debug.put('No ' + this.name + ' found with ' + this.name + 'Id: ' + req.params[this.name + 'Id']);\n            return this.setResponse.call(this, res, {status: 404}, next);\n          }\n\n          item.set(update);\n          options.hooks.put.before.call(\n            this,\n            req,\n            res,\n            item,\n            item.save.bind(item, function(err, item) {\n              if (err) {\n                debug.put(err);\n                return this.setResponse.call(this, res, {status: 500, error: err}, next);\n              }\n\n              debug.put(JSON.stringify(item));\n              return options.hooks.put.after.call(\n                this,\n                req,\n                res,\n                item,\n                this.setResponse.bind(this, res, {status: 200, item: item}, next)\n              );\n            }.bind(this))\n          );\n        }.bind(this));\n      }, this.respond.bind(this), options);\n      return this;\n    },\n\n    /**\n     * Patch (Partial Update) a resource.\n     */\n    patch: function(options) {\n      options = this.getMethodOptions('patch', options);\n      this.methods.push('patch');\n      this.register(app, 'patch', this.route + '/:' + this.name + 'Id', function(req, res, next) {\n        // Store the internal method for response manipulation.\n        req.__rMethod = 'patch';\n\n        if (req.skipResource) { return next(); }\n        var query = req.modelQuery || this.model;\n        query.findOne({'_id': req.params[this.name + 'Id']}, function(err, item) {\n          if (err) return this.setResponse(res, {status: 500, error: err}, next);\n          if (!item) return this.setResponse(res, {status: 404, error: err}, next);\n          var patches = req.body;\n          try {\n            for (var len = patches.length, i=0; i<len; ++i) {\n              var patch = patches[i];\n              if(patch.op=='test'){\n                var success = jsonpatch.apply(item, [].concat(patch), true);\n                if(!success){\n                  return this.setResponse(res, {\n                    status: 412,\n                    name: 'Precondition Failed',\n                    message: 'A json-patch test op has failed. No changes have been applied to the document',\n                    item: item,\n                    patch: patch\n                  }, next);\n                }\n              }\n            }\n            jsonpatch.apply(item, patches, true);\n          } catch(err) {\n            if (err) return this.setResponse(res, {status: 500, item: item, error: err}, next);\n          }\n          item.save(function (err, item) {\n            if (err) return this.setResponse(res, {status: 400, error: err}, next);\n            return this.setResponse(res, {status: 200, item: item}, next);\n          }.bind(this));\n        }.bind(this));\n      }, this.respond.bind(this), options);\n      return this;\n    },\n\n    /**\n     * Delete a resource.\n     */\n    delete: function(options) {\n      options = this.getMethodOptions('delete', options);\n      this.methods.push('delete');\n      this.register(app, 'delete', this.route + '/:' + this.name + 'Id', function(req, res, next) {\n        // Store the internal method for response manipulation.\n        req.__rMethod = 'delete';\n\n        if (req.skipResource) {\n          debug.delete('SKipping Resource');\n          return next();\n        }\n\n        var query = req.modelQuery || this.model;\n        query.findOne({'_id': req.params[this.name + 'Id']}, function(err, item) {\n          if (err) {\n            debug.delete(err);\n            return this.setResponse.call(this, res, {status: 500, error: err}, next);\n          }\n          if (!item) {\n            debug.delete('No ' + this.name + ' found with ' + this.name + 'Id: ' + req.params[this.name + 'Id']);\n            return this.setResponse.call(this, res, {status: 404, error: err}, next);\n          }\n          if (req.skipDelete) {\n            return this.setResponse.call(this, res, {status: 204, item: item, deleted: true}, next);\n          }\n\n          options.hooks.delete.before.call(\n            this,\n            req,\n            res,\n            item,\n            query.remove.bind(query, {_id: item._id}, function(err) {\n              if (err) {\n                debug.delete(err);\n                return this.setResponse.call(this, res, {status: 400, error: err}, next);\n              }\n\n              debug.delete(item);\n              options.hooks.delete.after.call(\n                this,\n                req,\n                res,\n                item,\n                this.setResponse.bind(this, res, {status: 204, item: item, deleted: true}, next)\n              );\n            }.bind(this))\n          );\n        }.bind(this));\n      }, this.respond.bind(this), options);\n      return this;\n    },\n\n    /**\n     * Returns the swagger definition for this resource.\n     */\n    swagger: function(resetCache) {\n      resetCache = resetCache || false;\n      if (!this.__swagger || resetCache) {\n        this.__swagger = require('./Swagger')(this);\n      }\n      return this.__swagger;\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-resourcejs/node_modules/resourcejs/Swagger.js":"var _ = require('lodash');\nvar mongoose = require('mongoose');\nmodule.exports = function(resource) {\n\n  var fixNestedRoutes = function(resource) {\n    routeParts = resource.route.split('/');\n    for (i=0;i<routeParts.length;i++) {\n      if (routeParts[i].charAt(0) == ':') {\n        routeParts[i] = '{' + routeParts[i].slice(1) + '}'\n      }\n    }\n    resource.routeFixed = routeParts.join('/');\n    return resource\n  };\n  resource = fixNestedRoutes(resource);\n\n  var addNestedIdParameter = function(resource, parameters) {\n    if (resource && resource.route && resource.route.includes(\"/:\")) {\n      if (resource.route.match(/:(.+)\\//).length >= 1 && resource.route.match(/^\\/(.+)\\/\\:/).length >= 1) {\n\n        idName = resource.route.match(/:(.+)\\//)[1];\n        primaryModel = resource.route.match(/^\\/(.+)\\/\\:/)[1];\n\n        parameters.push({\n          in: 'path',\n          name: idName,\n          description: 'The parent model of ' + resource.modelName + ': ' + primaryModel,\n          required: true,\n          type: 'string'\n        })\n      }\n    }\n  };\n  /**\n   * Converts a Mongoose property to a Swagger property.\n   *\n   * @param options\n   * @returns {*}\n   */\n  var getProperty = function(path, name) {\n\n    var options = path.options;\n\n    // Convert to the proper format if needed.\n    if (!options.hasOwnProperty('type')) options = {type: options};\n\n    // If no type, then return null.\n    if (!options.type) {\n      return null;\n    }\n\n    // If this is an array, then return the array with items.\n    if (Array.isArray(options.type)) {\n      if (options.type[0].hasOwnProperty('paths')) {\n        return {\n          type: 'array',\n          title: name,\n          items: {\n            $ref: '#/definitions/' + name\n          },\n          definitions: getModel(options.type[0], name)\n        };\n      }\n      return {\n        type: 'array',\n        items: {\n          type: 'string',\n        }\n      };\n    }\n    // For embedded schemas:\n    if (options.type.constructor.name === 'Schema') {\n      if (options.type.hasOwnProperty('paths')) {\n        return {\n          $ref: '#/definitions/' + name,\n          definitions: getModel(options.type, name)\n        };\n      }\n    }\n    if (typeof options.type === 'function') {\n      var functionName = options.type.toString();\n      functionName = functionName.substr('function '.length);\n      functionName = functionName.substr(0, functionName.indexOf('('));\n\n      switch (functionName) {\n        case 'ObjectId':\n          return {\n            'type': 'string',\n            'description': 'ObjectId'\n          };\n        case 'Oid':\n          return {\n            'type': 'string',\n            'description': 'Oid'\n          };\n        case 'Array':\n          return {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          };\n        case 'Mixed':\n          return {\n            type: 'object'\n          };\n        case 'Buffer':\n          return {\n            type: 'string'\n          };\n      }\n    }\n\n    switch(options.type) {\n      case String:\n        return {\n          type: 'string'\n        };\n      case Number:\n        return {\n          type: 'integer',\n          format: 'int64'\n        };\n      case Date:\n        return {\n          type: 'string',\n          format: 'date'\n        };\n      case Boolean:\n        return {\n          type: 'boolean'\n        };\n      case Function:\n        break;\n      case Object:\n        return null;\n    }\n\n    if (options.type instanceof Object) return null;\n    throw new Error('Unrecognized type: ' + options.type);\n  };\n\n  var getModel = function(schema, modelName) {\n    // Define the definition structure.\n    var definitions = {};\n\n    definitions[modelName] = {\n//      required: [],\n      title: modelName,\n      properties: {},\n    };\n\n    // Iterate through each model schema path.\n    _.each(schema.paths, function(path, name) {\n\n      // Set the property for the swagger model.\n      var property = getProperty(path, name);\n      if (name.substr(0, 2) !== '__' && property) {\n\n        // Add the description if they provided it.\n        if (path.options.description) {\n          property.description = path.options.description;\n        }\n\n        // Add the example if they provided it.\n        if (path.options.example) {\n          property.example = path.options.example;\n        }\n\n        // Add the required params if needed.\n        if (path.options.required) {\n//          definition.required.push(name);\n        }\n\n        // Set enum values if applicable\n        if (path.enumValues && path.enumValues.length > 0) {\n          property.allowableValues = { valueType: 'LIST', values: path.enumValues };\n        }\n\n        // Set allowable values range if min or max is present\n        if (!isNaN(path.options.min) || !isNaN(path.options.max)) {\n          property.allowableValues = { valueType: 'RANGE' };\n        }\n\n        if (!isNaN(path.options.min)) {\n          property.allowableValues.min = path.options.min;\n        }\n\n        if (!isNaN(path.options.max)) {\n          property.allowableValues.max = path.options.max;\n        }\n\n        if (!property.type && !property.$ref) {\n          console.log('Warning: That field type is not yet supported in Swagger definitions, using \"string\"');\n          console.log('Path name: %s.%s', definition.id, name);\n          console.log('Mongoose type: %s', path.options.type);\n          property.type = 'string';\n        }\n\n        // Allow properties to pass back additional definitions.\n        if (property.definitions) {\n          definitions = _.merge(definitions, property.definitions);\n          delete property.definitions;\n        }\n\n        // Add this property to the definition.\n        definitions[modelName].properties[name] = property;\n      }\n    });\n\n    return definitions;\n  };\n\n\n  // Build and return a Swagger definition for this model.\n\n  var listPath = resource.routeFixed;\n  var itemPath = listPath + '/{' + resource.modelName + 'Id}';\n  bodyDefinitions = getModel(resource.model.schema, resource.modelName);\n\n  var swagger = {\n    definitions: {},\n    paths: {}\n  };\n\n  // Build Swagger definitions.\n  swagger.definitions = _.merge(swagger.definitions, bodyDefinitions);\n  swagger.definitions[resource.modelName + 'List'] = {\n    type: 'array',\n      items: {\n        $ref: '#/definitions/' + resource.modelName,\n      }\n  };\n\n  // Build Swagger paths\n  var methods = resource.methods;\n\n\n  // INDEX and POST listPath\n  if (methods.indexOf('index') > -1 || methods.indexOf('post') > -1) swagger.paths[listPath] = {};\n\n  // INDEX of listPath\n  if (methods.indexOf('index') > -1) {\n    swagger.paths[listPath].get = {\n      tags: [resource.name],\n      summary: 'List multiple ' + resource.modelName + ' resources.',\n      description: 'This operation allows you to list and search for ' + resource.modelName + ' resources provided query arguments.',\n      operationId: 'get' + resource.modelName + 's',\n      responses: {\n        401: {\n          description: 'Unauthorized.'\n        },\n        200: {\n          description: 'Resource(s) found.  Returned as array.',\n          schema: {\n            $ref: \"#/definitions/\" + resource.modelName + \"List\"\n          }\n        }\n      },\n      parameters: [\n        {\n          name: 'skip',\n          in: 'query',\n          description: 'How many records to skip when listing. Used for pagination.',\n          required: false,\n          type: 'integer',\n          default: 0\n        },\n        {\n          name: 'limit',\n          in: 'query',\n          description: 'How many records to limit the output.',\n          required: false,\n          type: 'integer',\n          default: 10\n        },\n        //{\n        //  name: 'count',\n        //  in: 'query',\n        //  description: 'Set to true to return the number of records instead of the documents.',\n        //  type: 'boolean',\n        //  required: false,\n        //  default: false\n        //},\n        {\n          name: 'sort',\n          in: 'query',\n          description: 'Which fields to sort the records on.',\n          type: 'string',\n          required: false,\n          default: ''\n        },\n        {\n          name: 'select',\n          in: 'query',\n          description: 'Select which fields will be returned by the query.',\n          type: 'string',\n          required: false,\n          default: ''\n        },\n        {\n          name: 'populate',\n          in: 'query',\n          description: 'Select which fields will be fully populated with the reference.',\n          type: 'string',\n          required: false,\n          default: ''\n        }\n      ]\n\n    };\n    addNestedIdParameter(resource, swagger.paths[listPath].get.parameters)\n\n  }\n\n  // POST listPath.\n  if (methods.indexOf('post') > -1) {\n    swagger.paths[listPath].post = {\n      tags: [resource.name],\n      summary: 'Create a new ' + resource.modelName,\n      description: 'Create a new ' + resource.modelName,\n      operationId: 'create' + resource.modelName,\n      responses: {\n        401: {\n          description: 'Unauthorized.  Note that anonymous submissions are *enabled* by default.'\n        },\n        400: {\n          description: 'An error has occured trying to create the resource.'\n        },\n        201: {\n          description: 'The resource has been created.'\n        }\n      },\n      parameters: [\n        {\n          in: 'body',\n          name: 'body',\n          description: 'Data used to create a new ' + resource.modelName,\n          required: true,\n          schema: {\n            $ref: \"#/definitions/\" + resource.modelName\n          }\n        }\n      ]\n    };\n    addNestedIdParameter(resource, swagger.paths[listPath].post.parameters)\n\n  }\n\n  // The resource path for this resource.\n  if (methods.indexOf('get') > -1 ||\n    methods.indexOf('put') > -1 ||\n    methods.indexOf('delete') > -1) swagger.paths[itemPath] = {};\n\n  // GET itemPath.\n  if (methods.indexOf('get') > -1) {\n    swagger.paths[itemPath].get = {\n      tags: [resource.name],\n      summary: 'Return a specific ' + resource.name + ' instance.',\n      description: 'Return a specific ' + resource.name + ' instance.',\n      operationId: 'get' + resource.modelName,\n      responses: {\n        500: {\n          description: 'An error has occurred.'\n        },\n        404: {\n          description: 'Resource not found'\n        },\n        401: {\n          description: 'Unauthorized.'\n        },\n        200: {\n          description: 'Resource found',\n          schema: {\n            $ref: \"#/definitions/\" + resource.modelName\n          }\n        }\n      },\n      parameters: [\n        {\n          name: resource.modelName + 'Id',\n          in: 'path',\n          description: 'The ID of the ' + resource.name + ' that will be retrieved.',\n          required: true,\n          type: 'string'\n        }\n      ]\n    };\n    addNestedIdParameter(resource, swagger.paths[itemPath].get.parameters)\n\n  }\n\n  // PUT itemPath\n  if (methods.indexOf('put') > -1) {\n    swagger.paths[itemPath].put = {\n      tags: [resource.name],\n      summary: 'Update a specific ' + resource.name + ' instance.',\n      description: 'Update a specific ' + resource.name + ' instance.',\n      operationId: 'update' + resource.modelName,\n      responses: {\n        500: {\n          description: 'An error has occurred.'\n        },\n        404: {\n          description: 'Resource not found'\n        },\n        401: {\n          description: 'Unauthorized.'\n        },\n        400: {\n          description: 'Resource could not be updated.'\n        },\n        200: {\n          description: 'Resource updated',\n          schema: {\n            $ref: \"#/definitions/\" + resource.modelName\n          }\n        }\n      },\n      parameters: [\n        {\n          name: resource.modelName + 'Id',\n          in: 'path',\n          description: 'The ID of the ' + resource.name + ' that will be updated.',\n          required: true,\n          type: 'string'\n        },\n        {\n          in: 'body',\n          name: 'body',\n          description: 'Data used to update ' + resource.modelName,\n          required: true,\n          schema: {\n            $ref: \"#/definitions/\" + resource.modelName\n          }\n        }\n      ]\n    };\n    addNestedIdParameter(resource, swagger.paths[itemPath].put.parameters)\n\n  }\n\n  // DELETE itemPath\n  if (methods.indexOf('delete') > -1) {\n    swagger.paths[itemPath].delete = {\n      tags: [resource.name],\n      summary: 'Delete a specific ' + resource.name,\n      description: 'Delete a specific ' + resource.name,\n      operationId: 'delete' + resource.modelName,\n      responses: {\n        500: {\n          description: 'An error has occurred.'\n        },\n        404: {\n          description: 'Resource not found'\n        },\n        401: {\n          description: 'Unauthorized.'\n        },\n        400: {\n          description: 'Resource could not be deleted.'\n        },\n        204: {\n          description: 'Resource was deleted'\n        }\n      },\n      parameters: [\n        {\n          name: resource.modelName + 'Id',\n          in: 'path',\n          description: 'The ID of the ' + resource.name + ' that will be deleted.',\n          required: true,\n          type: 'string'\n        }\n      ]\n    };\n    addNestedIdParameter(resource, swagger.paths[itemPath].delete.parameters)\n\n  }\n\n  // Return the swagger definition for this resource.\n  return swagger;\n};\n"}